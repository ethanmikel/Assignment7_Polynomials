"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Kavya Chowti and Ethan Mikel, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: kc45736
UT EID 2: etm693
"""

class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    def __init__(self):
        self.head = None

    # Insert the term with the coefficient coeff and exponent exp into the polynomial.
    # If a term with that exponent already exists, add the coefficients together.
    # You must keep the terms in descending order by exponent.
    def insert_term(self, coeff, exp):
        if coeff == 0:
            return

        new_node = Node(coeff, exp)

        # Handle the case for zero exponents
        if self.head is None or exp > self.head.exp:
            new_node.next = self.head
            self.head = new_node
        else:
            current = self.head
            prev = None
            while current and current.exp > exp:
                prev = current
                current = current.next

            if current and current.exp == exp:
                current.coeff += coeff
                # Remove term if its coefficient becomes zero
                if current.coeff == 0:
                    if prev:
                        prev.next = current.next
                    else:
                        self.head = current.next
            else:
                new_node.next = current
                if prev:
                    prev.next = new_node
                else:
                    self.head = new_node

    # Add a polynomial p to the polynomial and return the resulting polynomial as a new linked list.
    def add(self, p):
        result = LinkedList()
        p1, p2 = self.head, p.head

        while p1 or p2:
            if p1 and (not p2 or p1.exp > p2.exp):
                result.insert_term(p1.coeff, p1.exp)
                p1 = p1.next
            elif p2 and (not p1 or p2.exp > p1.exp):
                result.insert_term(p2.coeff, p2.exp)
                p2 = p2.next
            else:
                sum_coeff = p1.coeff + p2.coeff
                if sum_coeff != 0:
                    result.insert_term(sum_coeff, p1.exp)
                p1, p2 = p1.next, p2.next

        return result

    # Multiply a polynomial p with the polynomial and return the product as a new linked list.
    def mult(self, p):
        result = LinkedList()
        p1 = self.head

        while p1:
            temp = LinkedList()
            p2 = p.head

            while p2:
                temp.insert_term(p1.coeff * p2.coeff, p1.exp + p2.exp)
                p2 = p2.next

            result = result.add(temp)  # Add intermediate result to the final product.
            p1 = p1.next

        return result

    # Return a string representation of the polynomial.
    def __str__(self):
        if not self.head:
            return ""

        terms = []
        current = self.head
        while current:
            coeff = current.coeff
            exp = current.exp

            if coeff == 0:
                current = current.next
                continue

            terms.append(f"({coeff}, {exp})")

            current = current.next

        return " + ".join(terms)

def main():
    # Loop through all test files
    for i in range(12):
        input_file = f'test_{i}.in'
        output_file = f'test_{i}.out'
        
        if os.path.exists(input_file):
            print(f"Processing {input_file} -> {output_file}")
            
            try:
                with open(input_file, 'r') as infile, open(output_file, 'w') as outfile:
                    num_terms_p1 = int(infile.readline().strip())
                    p1 = LinkedList()
                    for _ in range(num_terms_p1):
                        coeff, exp = map(int, infile.readline().strip().split())
                        p1.insert_term(coeff, exp)

                    num_terms_p2 = int(infile.readline().strip())
                    p2 = LinkedList()
                    for _ in range(num_terms_p2):
                        coeff, exp = map(int, infile.readline().strip().split())
                        p2.insert_term(coeff, exp)

                    sum_result = p1.add(p2)
                    product_result = p1.mult(p2)

                    outfile.write("Sum of polynomials: " + str(sum_result) + "\n")
                    outfile.write("Product of polynomials: " + str(product_result) + "\n")
            
            except Exception as e:
                print(f"An error occurred while processing {input_file}: {e}")
        
        else:
            print(f"{input_file} does not exist. Skipping.")

if __name__ == "__main__":
    main()
